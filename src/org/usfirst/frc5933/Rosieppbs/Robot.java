// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc5933.Rosieppbs;

import org.usfirst.frc5933.Rosieppbs.commands.*;
import org.usfirst.frc5933.Rosieppbs.subsystems.*;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	private Command teleopCommand;
	private Command autonomousCommand;
	public static OI oi;
	double sendDistanceTimesStamp;
	public static final boolean debugModeEnabled = false;
	private static boolean useLidarToAdjustFlyWheel = false;
	private static int shotCounter = 12;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static DriveTrain driveTrain;
	public static BallLauncher ballLauncher;
	public static BallHopper ballHopper;
	public static Electrical electrical;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrain = new DriveTrain();
		ballLauncher = new BallLauncher();
		ballHopper = new BallHopper();
		electrical = new Electrical();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		autonomousCommand = new DefaultAutonomousCommand();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		teleopCommand = new DefaultTeleopCommand();
		sendDistanceTimesStamp = 0;
	}

	/**
	 * This function is called when the disabled button is hit. You can use it to
	 * reset subsystems before shutting down.
	 */
	public void disabledInit() {
		RobotMap.disabledInit();
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		if (autonomousCommand != null) {
			autonomousCommand.start();
		}
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
		SmartDashboard.putBoolean("Use Lidar", useLidarToAdjustFlyWheel);
		SmartDashboard.putNumber("Shots left to fire:", shotCounter);
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();

		if (teleopCommand != null) {
			teleopCommand.start();
		}

		// only send the distance to the smart dash board every 1 seconds
		// since we don't want to affect the joystick interaction
		double now = System.currentTimeMillis();
		if (now - sendDistanceTimesStamp > 1000)
			SmartDashboard.putNumber("Lidar Distance", RobotMap.ballLauncherSpock.getDistance());
	}

	public static void flopLidar() {
		useLidarToAdjustFlyWheel = !useLidarToAdjustFlyWheel;
		SmartDashboard.putBoolean("Use Lidar", useLidarToAdjustFlyWheel);
	}

	public static void doneDidIt() {
		shotCounter--;
		SmartDashboard.putNumber("Shots left to fire:", shotCounter);
	}

	public static boolean useLidar() {
		return useLidarToAdjustFlyWheel;
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
